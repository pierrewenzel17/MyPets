// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyPetsAPI.Models;

namespace MyPetsAPI.Migrations
{
    [DbContext(typeof(MyPetsContext))]
    partial class MyPetsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("MyPetsAPI.Models.Investigation", b =>
                {
                    b.Property<int?>("InvestigationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("investigation_id");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("breed");

                    b.Property<int>("HolderInvestigatorId")
                        .HasColumnType("int")
                        .HasColumnName("holder_investigator_id");

                    b.Property<int>("InvestigationOffenderId")
                        .HasColumnType("int")
                        .HasColumnName("investigation_offender_id");

                    b.Property<int>("InvestigationPlaintiffId")
                        .HasColumnType("int")
                        .HasColumnName("investigation_plaintiff_id");

                    b.Property<bool>("IsFinish")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_finish");

                    b.Property<int>("NumberOfPets")
                        .HasColumnType("int")
                        .HasColumnName("number_of_pets");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("reason");

                    b.HasKey("InvestigationId");

                    b.HasIndex(new[] { "HolderInvestigatorId" }, "holder_investigator_id");

                    b.HasIndex(new[] { "InvestigationOffenderId" }, "investigation_offender_id");

                    b.HasIndex(new[] { "InvestigationPlaintiffId" }, "investigation_plaintiff_id");

                    b.ToTable("INVESTIGATION");
                });

            modelBuilder.Entity("MyPetsAPI.Models.InvestigationDocument", b =>
                {
                    b.Property<int?>("InvestigationDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("investigation_document_id");

                    b.Property<byte[]>("File")
                        .HasColumnType("longblob")
                        .HasColumnName("file");

                    b.HasKey("InvestigationDocumentId");

                    b.ToTable("INVESTIGATION_DOCUMENT");
                });

            modelBuilder.Entity("MyPetsAPI.Models.InvestigationPerson", b =>
                {
                    b.Property<int?>("InvestigationPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("investigation_person_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("city");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone_number");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("zip_code");

                    b.HasKey("InvestigationPersonId");

                    b.ToTable("INVESTIGATION_PERSON");
                });

            modelBuilder.Entity("MyPetsAPI.Models.InvestigationToInvestigationDocument", b =>
                {
                    b.Property<int?>("InvestigationToInvestigationDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("investigation_to_investigation_document_id");

                    b.Property<int>("InvestigationDocumentId")
                        .HasColumnType("int")
                        .HasColumnName("investigation_document_id");

                    b.Property<int>("InvestigationId")
                        .HasColumnType("int")
                        .HasColumnName("investigation_id");

                    b.HasKey("InvestigationToInvestigationDocumentId");

                    b.HasIndex(new[] { "InvestigationDocumentId" }, "investigation_document_id");

                    b.HasIndex(new[] { "InvestigationId" }, "investigation_id");

                    b.ToTable("INVESTIGATION_TO_INVESTIGATION_DOCUMENT");
                });

            modelBuilder.Entity("MyPetsAPI.Models.InvestigationToRound", b =>
                {
                    b.Property<int?>("InvestigationToRoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("investigation_to_round_id");

                    b.Property<int>("InvestigationId")
                        .HasColumnType("int")
                        .HasColumnName("investigation_id");

                    b.Property<int>("RoundId")
                        .HasColumnType("int")
                        .HasColumnName("round_id");

                    b.HasKey("InvestigationToRoundId");

                    b.HasIndex(new[] { "InvestigationId" }, "investigation_id")
                        .HasDatabaseName("investigation_id1");

                    b.HasIndex(new[] { "RoundId" }, "round_id");

                    b.ToTable("INVESTIGATION_TO_ROUND");
                });

            modelBuilder.Entity("MyPetsAPI.Models.Person", b =>
                {
                    b.Property<int?>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("city");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<int>("Hierarchy")
                        .HasColumnType("int")
                        .HasColumnName("hierarchy");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone_number");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("zip_code");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("zone");

                    b.HasKey("PersonId");

                    b.ToTable("PERSON");
                });

            modelBuilder.Entity("MyPetsAPI.Models.Round", b =>
                {
                    b.Property<int?>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("round_id");

                    b.Property<string>("CommentRound")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("comment_round");

                    b.Property<DateTime>("DateRound")
                        .HasColumnType("date")
                        .HasColumnName("date_round");

                    b.Property<int>("InvestigatorId")
                        .HasColumnType("int")
                        .HasColumnName("investigator_id");

                    b.HasKey("RoundId");

                    b.HasIndex(new[] { "InvestigatorId" }, "investigator_id");

                    b.ToTable("ROUND");
                });

            modelBuilder.Entity("MyPetsAPI.Models.RoundToInvestigationDocument", b =>
                {
                    b.Property<int?>("RoundToInvestigationDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("round_to_investigation_document_id");

                    b.Property<int>("InvestigationDocumentId")
                        .HasColumnType("int")
                        .HasColumnName("investigation_document_id");

                    b.Property<int>("RoundId")
                        .HasColumnType("int")
                        .HasColumnName("round_id");

                    b.HasKey("RoundToInvestigationDocumentId");

                    b.HasIndex(new[] { "InvestigationDocumentId" }, "investigation_document_id")
                        .HasDatabaseName("investigation_document_id1");

                    b.HasIndex(new[] { "RoundId" }, "round_id")
                        .HasDatabaseName("round_id1");

                    b.ToTable("ROUND_TO_INVESTIGATION_DOCUMENT");
                });

            modelBuilder.Entity("MyPetsAPI.Models.Investigation", b =>
                {
                    b.HasOne("MyPetsAPI.Models.Person", "HolderInvestigator")
                        .WithMany("Investigations")
                        .HasForeignKey("HolderInvestigatorId")
                        .HasConstraintName("INVESTIGATION_ibfk_1")
                        .IsRequired();

                    b.HasOne("MyPetsAPI.Models.InvestigationPerson", "InvestigationOffender")
                        .WithMany("InvestigationInvestigationOffenders")
                        .HasForeignKey("InvestigationOffenderId")
                        .HasConstraintName("INVESTIGATION_ibfk_2")
                        .IsRequired();

                    b.HasOne("MyPetsAPI.Models.InvestigationPerson", "InvestigationPlaintiff")
                        .WithMany("InvestigationInvestigationPlaintiffs")
                        .HasForeignKey("InvestigationPlaintiffId")
                        .HasConstraintName("INVESTIGATION_ibfk_3")
                        .IsRequired();

                    b.Navigation("HolderInvestigator");

                    b.Navigation("InvestigationOffender");

                    b.Navigation("InvestigationPlaintiff");
                });

            modelBuilder.Entity("MyPetsAPI.Models.InvestigationToInvestigationDocument", b =>
                {
                    b.HasOne("MyPetsAPI.Models.InvestigationDocument", "InvestigationDocument")
                        .WithMany("InvestigationToInvestigationDocuments")
                        .HasForeignKey("InvestigationDocumentId")
                        .HasConstraintName("INVESTIGATION_TO_INVESTIGATION_DOCUMENT_ibfk_2")
                        .IsRequired();

                    b.HasOne("MyPetsAPI.Models.Investigation", "Investigation")
                        .WithMany("InvestigationToInvestigationDocuments")
                        .HasForeignKey("InvestigationId")
                        .HasConstraintName("INVESTIGATION_TO_INVESTIGATION_DOCUMENT_ibfk_1")
                        .IsRequired();

                    b.Navigation("Investigation");

                    b.Navigation("InvestigationDocument");
                });

            modelBuilder.Entity("MyPetsAPI.Models.InvestigationToRound", b =>
                {
                    b.HasOne("MyPetsAPI.Models.Investigation", "Investigation")
                        .WithMany("InvestigationToRounds")
                        .HasForeignKey("InvestigationId")
                        .HasConstraintName("INVESTIGATION_TO_ROUND_ibfk_2")
                        .IsRequired();

                    b.HasOne("MyPetsAPI.Models.Round", "Round")
                        .WithMany("InvestigationToRounds")
                        .HasForeignKey("RoundId")
                        .HasConstraintName("INVESTIGATION_TO_ROUND_ibfk_1")
                        .IsRequired();

                    b.Navigation("Investigation");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("MyPetsAPI.Models.Round", b =>
                {
                    b.HasOne("MyPetsAPI.Models.Person", "Investigator")
                        .WithMany("Rounds")
                        .HasForeignKey("InvestigatorId")
                        .HasConstraintName("ROUND_ibfk_1")
                        .IsRequired();

                    b.Navigation("Investigator");
                });

            modelBuilder.Entity("MyPetsAPI.Models.RoundToInvestigationDocument", b =>
                {
                    b.HasOne("MyPetsAPI.Models.InvestigationDocument", "InvestigationDocument")
                        .WithMany("RoundToInvestigationDocuments")
                        .HasForeignKey("InvestigationDocumentId")
                        .HasConstraintName("ROUND_TO_INVESTIGATION_DOCUMENT_ibfk_2")
                        .IsRequired();

                    b.HasOne("MyPetsAPI.Models.Round", "Round")
                        .WithMany("RoundToInvestigationDocuments")
                        .HasForeignKey("RoundId")
                        .HasConstraintName("ROUND_TO_INVESTIGATION_DOCUMENT_ibfk_1")
                        .IsRequired();

                    b.Navigation("InvestigationDocument");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("MyPetsAPI.Models.Investigation", b =>
                {
                    b.Navigation("InvestigationToInvestigationDocuments");

                    b.Navigation("InvestigationToRounds");
                });

            modelBuilder.Entity("MyPetsAPI.Models.InvestigationDocument", b =>
                {
                    b.Navigation("InvestigationToInvestigationDocuments");

                    b.Navigation("RoundToInvestigationDocuments");
                });

            modelBuilder.Entity("MyPetsAPI.Models.InvestigationPerson", b =>
                {
                    b.Navigation("InvestigationInvestigationOffenders");

                    b.Navigation("InvestigationInvestigationPlaintiffs");
                });

            modelBuilder.Entity("MyPetsAPI.Models.Person", b =>
                {
                    b.Navigation("Investigations");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("MyPetsAPI.Models.Round", b =>
                {
                    b.Navigation("InvestigationToRounds");

                    b.Navigation("RoundToInvestigationDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
